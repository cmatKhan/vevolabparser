name: Rust Release

on:
  push:
    branches:
      - main

env:
  GH_TOKEN: ${{ github.token }}

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache Rust dependencies
        uses: actions/cache@v3
        with:
          path: target
          key: ${{ runner.OS }}-build-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.OS }}-build-

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: beta
          default: true
          override: true
          target: ${{ matrix.os == 'macos-latest' && 'x86_64-apple-darwin' || matrix.os == 'windows-latest' && 'x86_64-pc-windows-msvc' || '' }}

      - name: Build
        shell: bash
        run: |
          cargo build --release
          mv target/release/vevolabparser \
            target/release/vevolabparser-${{ matrix.os }}${{ runner.os == 'Windows' && '.exe' || '' }}

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: vevolabparser-${{ matrix.os }}
          path: target/release/vevolabparser-${{ matrix.os }}${{ runner.os == 'Windows' && '.exe' || '' }}

  release:
    runs-on: ubuntu-latest
    needs: [build]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -n 1 | cut -d '"' -f 2)
          echo "VERSION=$VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Create GitHub release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ env.version }}"
          release_name: "${{ env.version }}"
          draft: false
          prerelease: false

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: binaries

      - name: Upload binaries to release
        run: |
          for file in binaries/*/*; do
            if [ -f "$file" ]; then
              echo "Uploading $file"
              chmod +x "$file"
              gh release upload "v${{ env.version }}" "$file" --clobber
            fi
          done
